name: Approve community job

on:
  issues:
    types: [labeled]

permissions:
  contents: write   # para commitear archivos
  issues: write     # para comentar/cerrar el issue

jobs:
  approve:
    if: github.event.label.name == 'approved'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extraer JSON del issue y guardarlo en approved/
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const fs   = require('fs');
            const body = context.payload.issue.body || '';

            // 1) Buscar el primer bloque ```json ... ```
            let match = body.match(/```json\s*([\s\S]*?)\s*```/i);
            if (!match) match = body.match(/```\s*([\s\S]*?)\s*```/); // fallback: cualquier bloque
            if (!match) core.setFailed('No se encontró un bloque de código con JSON en el issue.');

            // 2) Parsear JSON
            let data;
            try {
              data = JSON.parse(match[1]);
            } catch (e) {
              core.setFailed('JSON inválido: ' + e.message);
            }

            // 3) Validaciones mínimas
            const name = (data?.JobInfo?.Name || '').trim();
            if (!name) core.setFailed('Falta JobInfo.Name en el JSON.');
            const raw = JSON.stringify(data);
            if (Buffer.byteLength(raw, 'utf8') > 256 * 1024) {
              core.setFailed('El JSON supera 256 KB. Reduce el tamaño.');
            }

            // 4) Crear filename seguro
            const uid  = (data?.__uid || '').trim();
            const slug = s => (s || '')
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/(^-|-$)/g, '');
            let base = slug(name) || (uid ? slug(uid) : `job-${context.payload.issue.number}`);
            let filename = `${base}.json`;

            // Evitar colisiones: si existe, añadir sufijo -2, -3...
            fs.mkdirSync('approved', { recursive: true });
            let i = 2;
            while (fs.existsSync(`approved/${filename}`)) {
              filename = `${base}-${i}.json`;
              i++;
            }

            // 5) Guardar con formato pretty
            fs.writeFileSync(`approved/${filename}`, JSON.stringify(data, null, 2) + '\n');
            core.setOutput('filename', filename);

      - name: Regenerar index.json
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const dir = 'approved';
          const out = 'index.json';

          if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
          const files = fs.readdirSync(dir).filter(f => f.endsWith('.json')).sort();

          const index = [];
          for (const f of files) {
            try {
              const data = JSON.parse(fs.readFileSync(path.join(dir, f), 'utf8'));
              index.push({
                file: f,
                name: data?.JobInfo?.Name || '',
                img : data?.JobInfo?.Img  || '',
                uid : data?.__uid         || ''
              });
            } catch (e) {
              console.error('Saltando', f, e.message);
            }
          }

          fs.writeFileSync(out, JSON.stringify(index, null, 2) + '\n');
          NODE

      - name: Commit & push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "approve: ${{ steps.extract.outputs.filename }} (issue #${{ github.event.issue.number }})"
          file_pattern: "approved/*.json index.json"

      - name: Comentar en el issue
        uses: actions/github-script@v7
        with:
          script: |
            const fn = core.getInput('filename') || '${{ steps.extract.outputs.filename }}';
            const body = `✅ Trabajo aprobado y publicado:\n- **Archivo:** \`${fn}\`\n- Incluido en **index.json**`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Cerrar issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });
